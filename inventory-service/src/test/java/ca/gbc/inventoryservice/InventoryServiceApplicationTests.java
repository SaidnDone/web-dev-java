package ca.gbc.inventoryservice;

import ca.gbc.inventoryservice.dto.InventoryRequest;
import ca.gbc.inventoryservice.dto.InventoryResponse;
import ca.gbc.inventoryservice.model.Inventory;
import ca.gbc.inventoryservice.repository.InventoryRepository;
import ca.gbc.inventoryservice.service.InventoryServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class InventoryServiceApplicationTests {

	@Mock
	private InventoryRepository inventoryRepository;

	@InjectMocks
	private InventoryServiceImpl inventoryService;

	@BeforeEach
	public void setup() {
		MockitoAnnotations.openMocks(this);
	}

	@Test
	public void testIsInStock() {
		// Mock data
		InventoryRequest request1 = new InventoryRequest("SKU123", 5);
		InventoryRequest request2 = new InventoryRequest("SKU456", 10);

		// Note: 'id' is not considered in the test, as it's generated by the database

		Inventory inventory1 = new Inventory(null, "SKU123", 10);
		Inventory inventory2 = new Inventory(null, "SKU456", 5);

		List<InventoryRequest> requests = Arrays.asList(request1, request2);
		List<Inventory> availableInventory = Arrays.asList(inventory1, inventory2);

		// Mock repository behavior
		when(inventoryRepository.findAllByInventoryRequests(requests)).thenReturn(availableInventory);

		// Call the service method
		List<InventoryResponse> responses = inventoryService.isInStock(requests);

		// Verify the results
		assertEquals(2, responses.size());

		assertEquals("SKU123", responses.get(0).getSkuCode());
		assertEquals(true, responses.get(0).isSufficientStock());

		assertEquals("SKU456", responses.get(1).getSkuCode());
		assertEquals(false, responses.get(1).isSufficientStock());
	}
}
